11/27/2021
Observaciones:
    - Los componentes deben ir siempre con una inicial en mayuscula
    - Los "/" van siempre al inicio de la siguiente forma: </div>
    - Si React no detecta un componente al importarse al App probar reiniciando el proyecto desde npm start

11/28/2021
Observaciones:
    - JSX requiere para etiquetas Label usar htmlFor y no for para no confundirse con sintaxis de Javascript (for para bucles), ademas, este htmlFor cumple la funcion de enfocar el cursor en el campo cuando detecta un click sobre el label
    - Realmente los comentarios no necesitan estar encerrados por "{}", solo necesitan las llaves al momento de hacer el return, ahi es donde especificamos a JSX que lo que hay adentro es sintaxis de Javascript, sintaxis para comentarios, cabe recalcar que de igual forma seguiran apareciendo alertas
    - Ninung input debe ir con un texto adentro
    - Si se va a realizar algun proceso inmediatamente despues de actualizar el estado del componente, siempre realizar el proceso a modo de efecto secundario, osea; por medio de useEffect, el cual esperara a que se aplique el cambio correspondiente para realizar el efecto

11/29/2021
Observaciones:
    - Todos los input requieren de un atributo name para poder enviar su contenido
    - Todo formulario antes de su validacion debe tener en cuenta su estado inicial (campos llenos o campos vacios)
    - Scripts y Links van en Index.js
    - Las etiquetas Style deben formatearse a JSX de la siguiente forma: style={{atributo: "valor"}}
    - Todas las renderizaciones de vista deben incluir una etiqueta container, ya adentro van los div
    - El body del index debe especificar el estilizado del cuerpo de la pagina
    - Index.js debe contener referencias al estilizado de las paginas (links e imports)
    - Para pasar datos a un componente el Padre debe enviar los datos como parametro:
    
    <Padre>
        <Hijo variable=datos>
    </Padre>
    
    Y el hijo debe recibir los datos como parametro:

    function Hijo(parametro){
        <React.Fragment>
            {parametro.datos}
        </React.Fragment>
    }
    
12/1/2021

    - Objetos y metodos de document siguen siendo utilizables
    - Inputs requieren de un ID y un Value para poder capturar y setear datos, Value representa lo que muestra, ID referencia para la capturar
    - Mensajes de error necesitan ID y un Value para poder setearse, ID captura el parrafo y value lo setea (ya sea contenido o un string vacio)
    - onEnter debe de ser onKeyDown y capturarse por medio de un EventHandler, ahi se accede a los metodos del evento y comparar el atributo "key" con el nombre de la tecla que busquemos en ese evento, por ejemplo "Enter", de esta manera simulamos un onEnter
    - Organizar HTML desde su documento antes de copiarse a React, <br> no dejaran que React corra asi que tendran que cambiarse a <br /> con anterioridad

12/2/2021
    
    - Parrafos de error no contienen Value, se setea o accede atraves de innerHTML

12/3/2021
    
    - Por convencion es recomendable reemplazar los document.getElementById() por useRef(), para useRef basta con asignar la funcion useRef() a una variable, puede obtener un parametro por defecto, pero el input nunca debe tener value, solo debe tener el atributo ref={} y entre los corchetes la variable a la que se desea enganchar
    - readonly puede tirar alerta pero si se deja como readOnly no funcionara

12/9/2021

    - Para los select, debera usarse un value apuntando a un estado y un onChange apuntando a un Handler que haga el cambio de estado, en caso de preselccionarse algo debera de usarse un defaultValue apuntando al mismo estado que value.
    Si DefaultValue o Value no encuentra el estado en sus opciones, se seleccionara automaticamente la primera opcion (osea por defecto)